fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(title = "Plot of Penguins Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop), hr())
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop), hr())
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop))
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)
))
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)))
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr())
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
)
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
install.packages("shinythemes")
#install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
#theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("yeti"), # can type the theme you want
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(dplyr)
blood_count <- read_csv("data/blood_count.csv")
blood_count <- read_csv("data/blood_count_dataset.csv")
glmpse(blood_count)
glimpse(blood_count)
blood_count %>%
group_by(gender) %>%
summarize(min=min(red_blood_cells),
mean=mean(red_blood_cells),
max=max(red_blood_cells))
blood_count %>%
group_by(Gender) %>%
summarize(min=min(red_blood_cells),
mean=mean(red_blood_cells),
max=max(red_blood_cells))
blood_count %>%
group_by(Gender) %>%
summarize(min=min(Red_Blood_Cells),
mean=mean(Red_Blood_Cells),
max=max(Red_Blood_Cells))
blood_count %>%
filter(Gender == "male") %>%
select[3:9] %>%
colMeans(na.rm = TRUE)
blood_count %>%
filter(Gender == "male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
View(blood_count)
# Check for missing values in selected columns
anyNA(blood_count %>% filter(Gender == "male") %>% select(3:9))
blood_count %>%
filter(Gender == "male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
blood_count %>%
filter(Gender == "Male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
options(scipen = 999)
options(scipen = 999)
blood_count %>%
filter(Gender == "Male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
blood_count %>%
filter(Gender == "Male") %>%
select(3:9) %>%
colMeans(na.rm = TRUE)
bloood_count %>%
filter(Gender = "Female") %>%
select(3:9) %>%
colMeans(na.rm = T)
blood_count %>%
filter(Gender = "Female") %>%
select(3:9) %>%
colMeans(na.rm = T)
blood_count %>%
filter(Gender == "Female") %>%
select(3:9) %>%
colMeans(na.rm = T)
blood_count %>%
pivot_wider(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_wider(cols = Hemoglobin:MCHC, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_wider(cols = Hemoglobin:MCHC, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(cols = c(Hemoglobin:MCHC), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(cols = all_of("Hemoglobin"):all_of("MCHC"), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
library(ggplot2)
blood_count %>%
pivot_wider(cols = c(Hemoglobin:MCHC), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(cols = all_of("Hemoglobin"):all_of("MCHC"), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free") +
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_wider(cols = all_of("Hemoglobin"):all_of("MCHC"), names_to = "Test", values_to = "Values") #%>%
blood_count %>%
pivot_wider(cols = (3:9), name_from = "Test", values_from = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_wider(-Age:Gender, name_from = "Test", values_from = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_longer(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet(~ Test, scales = "free")
blood_count %>%
pivot_longer(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free")
grouped_bc <- blood_count %>%
mutate(Age_Group = case_when(
Age >= 20 & Age <= 29 ~ "20s",
Age >= 30 & Age <= 39 ~ "30s",
Age >= 40 & Age <= 49 ~ "40s",
Age >= 50 & Age <= 59 ~ "50s",
Age >= 60 & Age <= 70 ~ "60s")) # there were only 4 people in 70s, so I combined it with 60s
head(grouped_bc)
blood_count %>%
pivot_wider(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(ase(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_wider(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(ase(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free")
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_longer(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_longer(cols = (3:9), names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Gender, y = Values, fill = Gender)) +
geom_boxplot() +
facet_wrap(~ Test, scales = "free")+
labs(title = "Boxplot of Blood Count Tests",
x = "Test",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(ase(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap( Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
blood_count %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap(~Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
grouped_bc %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap(~Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
grouped_bc %>%
pivot_longer(cols = 3:9, names_to = "Test", values_to = "Values") %>%
ggplot(aes(x = Age_Group, y = Values, fill = Age_Group)) +
geom_boxplot() +
facet_wrap(~Test, scales = "free") +  # Facet by the "Test" variable
labs(title = "Boxplot of Blood Count Tests by Age Group",
x = "Age Group",
y = "Values")
