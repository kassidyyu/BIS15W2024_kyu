library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
runApp('homerange_app.R')
runApp('homerange2.R')
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
ui2 <- fluidPage(titlePanel("Homerange By Taxon"),
radioButtons("x", "Select Fill Variable", choices=c("taxon"), selected="taxon"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="log10.hra", fill = input$x)) +
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
View(homerange)
n_distinct(homerange$taxon)
count(homerange$taxon)
tabyl(homerange$taxon)
ui2 <- fluidPage(titlePanel("Homerange By Taxon"),
selectInput("x", "Select Fill Variable", choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="log10.hra", fill = input$x)) +
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
ui2 <- fluidPage(titlePanel("Homerange By Taxon"),
selectInput("x", "Select Fill Variable", choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x="log10.hra", fill = input$x)) +
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
ui2 <- fluidPage(titlePanel("Homerange By Taxon"),
selectInput("x", "Select Fill Variable", choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon = input$x) %>%
ggplot(aes_string(x="log10.hra", fill = input$x)) +
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
ui2 <- fluidPage(titlePanel("Homerange By Taxon"),
selectInput("x", "Select Fill Variable", choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
ggplot(aes_string(x="log10.hra", fill = input$x)) +
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
ui2 <- fluidPage(titlePanel("Log 10 Homerange By Taxon"), #add a title to the app
selectInput("x", "Select Fill Variable",
choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"),
selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon == input$x) %>% #the reactive part is filter
ggplot(aes(x = log10.hra)) + #no aes_string bc no reactive assigned to choosing x or y
geom_density(fill="steelblue", color="black", alpha=0.6)+
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui2, server2)
ui2 <- fluidPage(titlePanel("Log 10 Homerange By Taxon"), #add a title to the app
selectInput("x", "Select Fill Variable",
choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"),
selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server2 <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon == input$x) %>% #the reactive part is filter
ggplot(aes(x = log10.hra)) + #no aes_string bc no reactive assigned to choosing x or y
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui2, server2)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5), #different input type
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody())
fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5), #different input type
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5), #different input type
plotOutput("plot", width = "500px", height = "400px"),
dashboardHeader(),
dashboardSidebar(),
dashboardBody())
ui <- dashboardPage(dashboardHeader(),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5), #different input type
plotOutput("plot", width = "500px", height = "400px")
))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5), #different input type
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(title = "Plot of Penguins Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop), hr())
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop), hr())
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop))
)
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)
))
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)))
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr())
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr()
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px"))
)
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices=unique(wolves$pop)), hr() #gives some help with multiple observations
), # close first box
box(width = 7, plotOutput("plot", width = "600px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
wolves %>%
filter(sex != "NA", pop == input$x) %>% #the reactive part is filter
ggplot(aes(x = sex, fill = sex))+
geom_bar()
})
}
shinyApp(ui, server)
install.packages("shinythemes")
#install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
#theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("yeti"), # can type the theme you want
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
