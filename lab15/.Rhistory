knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(janitor)
library(dplyr)
library(shiny)
library(shinydashboard)
#load the Netflix Data in your Data folder, save it under the object name netflix
netflix <- read.csv("data/netflix_data.csv")
#load the Netflix Data in your Data folder, save it under the object name netflix
netflix <- read_csv("data/netflix_data.csv")
#load the Netflix Data in your Data folder, save it under the object name netflix
netflix <- read_csv("data/netflix_titles.csv")
# Check the structure of the data frame
str(netflix)
# Summarize the data frame
summary(netflix)
# Display the first few rows of the data frame
head(netflix)
# Display the last few rows of the data frame
tail(netflix)
# Get dimensions of the data frame
dim(netflix)
# Get names of columns in the data frame
colnames(netflix)
# Get the class of each column in the data frame
sapply(netflix, class)
# Get unique values in a specific column
unique(netflix$column_name)
# Check the structure of the data frame
str(netflix)
# Summarize the data frame
summary(netflix)
# Display the first few rows of the data frame
#head(netflix)
# Display the last few rows of the data frame
#tail(netflix)
# Get dimensions of the data frame
#dim(netflix)
# Get names of columns in the data frame
#colnames(netflix)
# Get the class of each column in the data frame
#sapply(netflix, class)
# Get unique values in a specific column
#unique(netflix$column_name)
# Filter movies from the 'netflix' data frame
netflix_movies <- netflix[netflix$type == "Movie", ]
# Display the first few rows of the 'netflix_movies' data frame
head(netflix_movies)
# Count occurrences of each director in netflix_movies
director_counts <- table(netflix_movies$director)
# Find the director with the most movies
most_common_director <- names(which.max(director_counts))
# Display the director with the most movies
most_common_director
# Count occurrences of each director in netflix_movies
director_counts <- table(netflix_movies$director)
# Find the director with the most movies
#most_common_director <- names(which.max(director_counts))
# Display the director with the most movies
#most_common_director
# Count occurrences of each director in netflix_movies
director_counts <- table(netflix_movies$director)
director_counts
# Find the director with the most movies
#most_common_director <- names(which.max(director_counts))
# Display the director with the most movies
#most_common_director
director_counts <- netflix_movies %>%
tabyl(director)
# Sort the table in descending order of movie counts
#director_counts <- director_counts[order(-director_counts$n), ]
# Display the director with the most movies
#director_counts[1, ]
View(director_counts)
director_counts <- netflix_movies %>%
tabyl(director)
# Sort the table in descending order of movie counts
#director_counts <- director_counts[order(-director_counts$n), ]
# Display the director with the most movies
#director_counts[1, ]
director_counts <- netflix_movies %>%
tabyl(director)
director_counts
# Sort the table in descending order of movie counts
#director_counts <- director_counts[order(-director_counts$n), ]
# Display the director with the most movies
#director_counts[1, ]
# Separate movies with multiple directors into separate rows
netflix_movies_separated <- netflix_movies %>%
separate_rows(director, sep = ", ")  # Split directors separated by comma
# Create a frequency table of directors and their movie counts
director_counts <- netflix_movies_separated %>%
tabyl(director)
# Sort the table in descending order of movie counts
director_counts <- director_counts[order(-director_counts$n), ]
# Display the director with the most movies
director_counts[1, ]
director_counts %>%
filter(director != NA)
director_counts %>%
filter(director != "NA")
director_counts <- director_counts %>%
filter(director != "NA")
director_counts[1, ]
# Load necessary library
library(ggplot2)
# Create a bar plot of the top directors with the most movies
ggplot(director_counts[1:10, ], aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies", title = "Top Directors with the Most Movies on Netflix") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()  # Flip the coordinates for horizontal bars
# Extract the top directors and their movie counts
top_directors <- head(director_counts, 10)  # Adjust the number as needed
top_director_names <- top_directors$director
top_director_counts <- top_directors$n
# Create a bar plot
barplot(top_director_counts,
names.arg = top_director_names,
main = "Top Directors with Most Movies on Netflix",
xlab = "Director",
ylab = "Number of Movies",
col = "skyblue",
las = 2,  # Rotate x-axis labels vertically
ylim = c(0, max(top_director_counts) + 2))  # Adjust ylim for better visualization
# Load necessary library
library(ggplot2)
# Create a bar plot of the top directors with the most movies
ggplot(director_counts[1:10, ], aes(x = reorder(director, n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies", title = "Top Directors with the Most Movies on Netflix") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()  # Flip the coordinates for horizontal bars
ggplot(netflix_movies, aes(x = director)) +
geom_bar(data = subset(netflix_movies, year(netflix_movies$date_added) == 2020),
stat = "count", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies",
title = "Directors with the Most Movies on Netflix in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Create a bar plot of the directors with the most movies in 2020
ggplot(netflix_movies, aes(x = director)) +
geom_bar(data = subset(netflix_movies, format(date_added, "%Y") == "2020"),
stat = "count", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies",
title = "Directors with the Most Movies on Netflix in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(netflix_movies)
View(netflix_movies_separated)
View(netflix_movies)
# Convert date_added column to Date format
netflix_movies$date_added <- as.Date(netflix_movies$date_added, format = "%Y-%m-%d")
# Create a bar plot of the directors with the most movies in 2020
ggplot(netflix_movies, aes(x = director)) +
geom_bar(data = subset(netflix_movies, format(date_added, "%Y") == "2020"),
stat = "count", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies",
title = "Directors with the Most Movies on Netflix in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convert date_added column to Date format
netflix_movies$date_added <- as.Date(netflix_movies$date_added, format = "%m-%d-%y")
# Create a bar plot of the directors with the most movies in 2020
ggplot(netflix_movies, aes(x = director)) +
geom_bar(data = subset(netflix_movies, format(date_added, "%Y") == "2020"),
stat = "count", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies",
title = "Directors with the Most Movies on Netflix in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter movies from the 'netflix' data frame
netflix_movies <- netflix[netflix$type == "Movie", ]
# Display the first few rows of the 'netflix_movies' data frame
head(netflix_movies)
# Convert date_added column to Date format
netflix_movies$date_added <- as.Date(netflix_movies$date_added, format = "%m-%d-%y")
# Create a bar plot of the directors with the most movies in 2020
ggplot(netflix_movies, aes(x = director)) +
geom_bar(data = subset(netflix_movies, format(date_added, "%Y") == "2020"),
stat = "count", fill = "skyblue") +
labs(x = "Director", y = "Number of Movies",
title = "Directors with the Most Movies on Netflix in 2020") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter movies from the 'netflix' data frame
netflix_movies <- netflix[netflix$type == "Movie", ]
# Display the first few rows of the 'netflix_movies' data frame
head(netflix_movies)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- read_csv("data/UC_admit.csv")
glimpse(UC_admit)
str(UC_admit)
View(UC_admit)
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(x = Ethnicity, y = Academic_Yr)+
geom_col()
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(x = Ethnicity, y = Campus)+
geom_col()
library(tidyverse)
library(shiny)
library(shinydashboard)
library(ggplot)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(ggplot2)
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(x = Ethnicity, y = Campus)+
geom_col()
UC_admit %>%
group_by(Ethnicity) %>%
ggplot(aes(x = Ethnicity, y = Campus))+
geom_col()
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
# Define server logic
server <- function(input, output) {
output$admissions_plot <- renderPlot({
filtered_data <- UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category)
ggplot(filtered_data, aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
# Define server logic
server <- function(input, output) {
output$admissions_plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category) %>%
ggplot(filtered_data, aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
# Define server logic
server <- function(input, output) {
output$admissions_plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category) %>%
ggplot(aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
# Define server logic
server <- function(input, output) {
output$admissions_plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category) %>%
ggplot(aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
# Define server logic
server <- function(input, output) {
output$admissions_plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category) %>%
ggplot(aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions Dashboard"),
dashboardSidebar(
selectInput("year", "Select Year:", choices = unique(UC_admit$Academic_Yr)),
selectInput("campus", "Select Campus:", choices = unique(UC_admit$Campus)),
selectInput("category", "Select Category:", choices = unique(UC_admit$Category))
),
dashboardBody(
fluidRow(
box(
title = "Admissions by Ethnicity",
status = "primary",
solidHeader = TRUE,
plotOutput("admissions_plot")
)
)
)
)
print(ui)
server <- function(input, output) {
output$admissions_plot <- renderPlot({
UC_admit %>%
filter(Academic_Yr == input$year,
Campus == input$campus,
Category == input$category) %>%
ggplot(aes(x = Ethnicity, y = Admissions, fill = Ethnicity)) +
geom_bar(stat = "identity") +
labs(title = "Admissions by Ethnicity",
x = "Ethnicity",
y = "Admissions",
fill = "Ethnicity") +
theme_minimal()
})
}
# Run the application
shinyApp(ui = ui, server = server)
